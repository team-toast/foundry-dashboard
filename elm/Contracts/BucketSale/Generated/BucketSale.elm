module Contracts.BucketSale.Generated.BucketSale exposing
    (  -- Buy
       -- , Entered
       -- , Exited
       -- , agreeToTermsAndConditionsListedInThisContractAndEnterSale
       -- , bucketCount
       -- ,
       bucketPeriod
       -- , bucketSupply

    ,  buckets
       -- , buyerReferralRewardPerc
       -- , buys
       -- , buysDecoder
       -- , calculateExitableTokens

    ,  currentBucket
       -- , enteredDecoder
       -- , enteredEvent
       -- , exit
       -- , exitedDecoder
       -- , exitedEvent
       -- , referredTotal
       -- , referrerReferralRewardPerc
       -- , startOfSale
       -- , termsAndConditions
       -- , tokenOnSale
       -- , tokenSoldFor
       -- , totalExitedTokens
       -- , treasury

    )

import BigInt exposing (BigInt)
import Eth.Abi.Decode as D exposing (abiDecode, andMap, data, toElmDecoder, topic)
import Eth.Abi.Encode as E exposing (Encoding(..), abiEncode)
import Eth.Types exposing (..)
import Eth.Utils as U
import Json.Decode as Decode exposing (Decoder, succeed)
import Json.Decode.Pipeline exposing (custom)



{-

   This file was generated by https://github.com/cmditch/elm-ethereum-generator v4.0.0
   Compatible with elm-ethereum v4.0.0

-}
-- agreeToTermsAndConditionsListedInThisContractAndEnterSale(address,uint256,uint256,address) function
-- agreeToTermsAndConditionsListedInThisContractAndEnterSale : Address -> Address -> BigInt -> BigInt -> Address -> Call ()
-- agreeToTermsAndConditionsListedInThisContractAndEnterSale contractAddress buyer_ bucketId_ amount_ referrer_ =
--     { to = Just contractAddress
--     , from = Nothing
--     , gas = Nothing
--     , gasPrice = Nothing
--     , value = Nothing
--     , data = Just <| E.functionCall "a393718c" [ E.address buyer_, E.uint bucketId_, E.uint amount_, E.address referrer_ ]
--     , nonce = Nothing
--     , decoder = Decode.succeed ()
--     }
-- bucketCount() function
-- bucketCount : Address -> Call BigInt
-- bucketCount contractAddress =
--     { to = Just contractAddress
--     , from = Nothing
--     , gas = Nothing
--     , gasPrice = Nothing
--     , value = Nothing
--     , data = Just <| E.functionCall "c2f5673e" []
--     , nonce = Nothing
--     , decoder = toElmDecoder D.uint
--     }
-- bucketPeriod() function


bucketPeriod : Address -> Call BigInt
bucketPeriod contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "c4aaeb1a" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- bucketSupply() function
-- bucketSupply : Address -> Call BigInt
-- bucketSupply contractAddress =
--     { to = Just contractAddress
--     , from = Nothing
--     , gas = Nothing
--     , gasPrice = Nothing
--     , value = Nothing
--     , data = Just <| E.functionCall "89ce96c6" []
--     , nonce = Nothing
--     , decoder = toElmDecoder D.uint
--     }
-- buckets(uint256) function


buckets : Address -> BigInt -> Call BigInt
buckets contractAddress a_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "9b51fb0d" [ E.uint a_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- buyerReferralRewardPerc() function
-- buyerReferralRewardPerc : Address -> Call BigInt
-- buyerReferralRewardPerc contractAddress =
--     { to = Just contractAddress
--     , from = Nothing
--     , gas = Nothing
--     , gasPrice = Nothing
--     , value = Nothing
--     , data = Just <| E.functionCall "3261933d" []
--     , nonce = Nothing
--     , decoder = toElmDecoder D.uint
--     }
-- buys(uint256,address) function
-- type alias Buy =
--     { valueEntered : BigInt
--     , buyerTokensExited : BigInt
--     }
-- buys : Address -> BigInt -> Address -> Call Buy
-- buys contractAddress a_ b_ =
--     { to = Just contractAddress
--     , from = Nothing
--     , gas = Nothing
--     , gasPrice = Nothing
--     , value = Nothing
--     , data = Just <| E.functionCall "f838b825" [ E.uint a_, E.address b_ ]
--     , nonce = Nothing
--     , decoder = buysDecoder
--     }
-- buysDecoder : Decoder Buy
-- buysDecoder =
--     abiDecode Buy
--         |> andMap D.uint
--         |> andMap D.uint
--         |> toElmDecoder
-- calculateExitableTokens(uint256,address) function
-- calculateExitableTokens : Address -> BigInt -> Address -> Call BigInt
-- calculateExitableTokens contractAddress bucketId_ buyer_ =
--     { to = Just contractAddress
--     , from = Nothing
--     , gas = Nothing
--     , gasPrice = Nothing
--     , value = Nothing
--     , data = Just <| E.functionCall "42f2b6ec" [ E.uint bucketId_, E.address buyer_ ]
--     , nonce = Nothing
--     , decoder = toElmDecoder D.uint
--     }
-- currentBucket() function


currentBucket : Address -> Call BigInt
currentBucket contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "4f127aae" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- exit(uint256,address) function
-- exit : Address -> BigInt -> Address -> Call ()
-- exit contractAddress bucketId_ buyer_ =
--     { to = Just contractAddress
--     , from = Nothing
--     , gas = Nothing
--     , gasPrice = Nothing
--     , value = Nothing
--     , data = Just <| E.functionCall "cff40759" [ E.uint bucketId_, E.address buyer_ ]
--     , nonce = Nothing
--     , decoder = Decode.succeed ()
--     }
-- referredTotal(address) function
-- referredTotal : Address -> Address -> Call BigInt
-- referredTotal contractAddress a_ =
--     { to = Just contractAddress
--     , from = Nothing
--     , gas = Nothing
--     , gasPrice = Nothing
--     , value = Nothing
--     , data = Just <| E.functionCall "97b2fd45" [ E.address a_ ]
--     , nonce = Nothing
--     , decoder = toElmDecoder D.uint
--     }
-- referrerReferralRewardPerc(address) function
-- referrerReferralRewardPerc : Address -> Address -> Call BigInt
-- referrerReferralRewardPerc contractAddress referrerAddress_ =
--     { to = Just contractAddress
--     , from = Nothing
--     , gas = Nothing
--     , gasPrice = Nothing
--     , value = Nothing
--     , data = Just <| E.functionCall "9361265f" [ E.address referrerAddress_ ]
--     , nonce = Nothing
--     , decoder = toElmDecoder D.uint
--     }
-- startOfSale() function
-- startOfSale : Address -> Call BigInt
-- startOfSale contractAddress =
--     { to = Just contractAddress
--     , from = Nothing
--     , gas = Nothing
--     , gasPrice = Nothing
--     , value = Nothing
--     , data = Just <| E.functionCall "a03effd1" []
--     , nonce = Nothing
--     , decoder = toElmDecoder D.uint
--     }
-- termsAndConditions() function
-- termsAndConditions : Address -> Call String
-- termsAndConditions contractAddress =
--     { to = Just contractAddress
--     , from = Nothing
--     , gas = Nothing
--     , gasPrice = Nothing
--     , value = Nothing
--     , data = Just <| E.functionCall "f678462f" []
--     , nonce = Nothing
--     , decoder = toElmDecoder D.string
--     }
-- tokenOnSale() function
-- tokenOnSale : Address -> Call Address
-- tokenOnSale contractAddress =
--     { to = Just contractAddress
--     , from = Nothing
--     , gas = Nothing
--     , gasPrice = Nothing
--     , value = Nothing
--     , data = Just <| E.functionCall "60e6a440" []
--     , nonce = Nothing
--     , decoder = toElmDecoder D.address
--     }
-- tokenSoldFor() function
-- tokenSoldFor : Address -> Call Address
-- tokenSoldFor contractAddress =
--     { to = Just contractAddress
--     , from = Nothing
--     , gas = Nothing
--     , gasPrice = Nothing
--     , value = Nothing
--     , data = Just <| E.functionCall "47e3baaa" []
--     , nonce = Nothing
--     , decoder = toElmDecoder D.address
--     }
-- totalExitedTokens() function
-- totalExitedTokens : Address -> Call BigInt
-- totalExitedTokens contractAddress =
--     { to = Just contractAddress
--     , from = Nothing
--     , gas = Nothing
--     , gasPrice = Nothing
--     , value = Nothing
--     , data = Just <| E.functionCall "4b42442e" []
--     , nonce = Nothing
--     , decoder = toElmDecoder D.uint
--     }
-- treasury() function
-- treasury : Address -> Call Address
-- treasury contractAddress =
--     { to = Just contractAddress
--     , from = Nothing
--     , gas = Nothing
--     , gasPrice = Nothing
--     , value = Nothing
--     , data = Just <| E.functionCall "61d027b3" []
--     , nonce = Nothing
--     , decoder = toElmDecoder D.address
--     }
-- Entered(address,uint256,address,uint256,uint256,address,uint256) event
-- type alias Entered =
--     { sender : Address
--     , bucketId : BigInt
--     , buyer : Address
--     , valueEntered : BigInt
--     , buyerReferralReward : BigInt
--     , referrer : Address
--     , referrerReferralReward : BigInt
--     }
-- enteredEvent : Address -> Maybe Address -> Maybe Address -> LogFilter
-- enteredEvent contractAddress buyer_ referrer_ =
--     { fromBlock = LatestBlock
--     , toBlock = LatestBlock
--     , address = contractAddress
--     , topics =
--         [ Just <| U.unsafeToHex "161e0456cd3270520befa83f5fdd74084ad38cd70a096dcf24ccf7edc368b04f"
--         , Maybe.map (abiEncode << E.address) buyer_
--         , Maybe.map (abiEncode << E.address) referrer_
--         ]
--     }
-- enteredDecoder : Decoder Entered
-- enteredDecoder =
--     Decode.succeed Entered
--         |> custom (data 0 D.address)
--         |> custom (data 1 D.uint)
--         |> custom (topic 1 D.address)
--         |> custom (data 2 D.uint)
--         |> custom (data 3 D.uint)
--         |> custom (topic 2 D.address)
--         |> custom (data 4 D.uint)
-- Exited(uint256,address,uint256) event
-- type alias Exited =
--     { bucketId : BigInt
--     , buyer : Address
--     , tokensExited : BigInt
--     }
-- exitedEvent : Address -> Maybe Address -> LogFilter
-- exitedEvent contractAddress buyer_ =
--     { fromBlock = LatestBlock
--     , toBlock = LatestBlock
--     , address = contractAddress
--     , topics =
--         [ Just <| U.unsafeToHex "0808b45a422e0acd47a625c74fff3eb8d6d4dd063e0845deb1e57581c27b32f5"
--         , Maybe.map (abiEncode << E.address) buyer_
--         ]
--     }
-- exitedDecoder : Decoder Exited
-- exitedDecoder =
--     Decode.succeed Exited
--         |> custom (data 0 D.uint)
--         |> custom (topic 1 D.address)
--         |> custom (data 1 D.uint)
