module Contracts.Generated.StakingScripts exposing
    ( GetData
    , getData
    , getDataDecoder
    , getStakedValue
    )

import Eth.Abi.Decode as D exposing (abiDecode, andMap, data, toElmDecoder, topic)
import Eth.Abi.Encode as E exposing (Encoding(..), abiEncode)
import BigInt exposing (BigInt)
import Eth.Types exposing (..)
import Eth.Utils as U
import Json.Decode as Decode exposing (Decoder, succeed)
import Json.Decode.Pipeline exposing (custom)



{-

   This file was generated by https://github.com/cmditch/elm-ethereum-generator v4.0.0
   Compatible with elm-ethereum v4.0.0

-}
-- getData(address,address) function


type alias GetData =
    { availableBalance : BigInt
    , stakedBalance : BigInt
    , allowedBalance : BigInt
    , earned : BigInt
    , totalStakedValue : BigInt
    , apy : BigInt
    , rewardRate : BigInt
    , timestamp : BigInt
    }


getData : Address -> Address -> Address -> Call GetData
getData contractAddress rewards_ staker_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "b4909307" [ E.address rewards_, E.address staker_ ]
    , nonce = Nothing
    , decoder = getDataDecoder
    }


getDataDecoder : Decoder GetData
getDataDecoder =
    abiDecode GetData
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> toElmDecoder


-- getStakedValue(address) function


getStakedValue : Address -> Address -> Call BigInt
getStakedValue contractAddress rewards_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "c7cd806e" [ E.address rewards_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }


