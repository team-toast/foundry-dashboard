module Contracts.Generated.Gulper exposing
    ( EthReceived
    , GetGulpDetail
    , Gulped
    , ethReceivedDecoder
    , ethReceivedEvent
    , getGulpDetails
    , getGulpDetailsDecoder
    , gulp
    , gulpedDecoder
    , gulpedEvent
    , moneyMoneyMoneyMONEY
    , pOOL
    , totalRaised
    , wETH
    )

import Eth.Abi.Decode as D exposing (abiDecode, andMap, data, toElmDecoder, topic)
import Eth.Abi.Encode as E exposing (Encoding(..), abiEncode)
import BigInt exposing (BigInt)
import Eth.Types exposing (..)
import Eth.Utils as U
import Json.Decode as Decode exposing (Decoder, succeed)
import Json.Decode.Pipeline exposing (custom)



{-

   This file was generated by https://github.com/cmditch/elm-ethereum-generator v4.0.0
   Compatible with elm-ethereum v4.0.0

-}
-- POOL() function


pOOL : Address -> Call Address
pOOL contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "7535d246" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- WETH() function


wETH : Address -> Call Address
wETH contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "ad5c4648" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- getGulpDetails() function


type alias GetGulpDetail =
    { wethBalanceToConvert : BigInt
    , minTokensToClaim : BigInt
    , pokeReward : BigInt
    }


getGulpDetails : Address -> Call GetGulpDetail
getGulpDetails contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "4179740b" []
    , nonce = Nothing
    , decoder = getGulpDetailsDecoder
    }


getGulpDetailsDecoder : Decoder GetGulpDetail
getGulpDetailsDecoder =
    abiDecode GetGulpDetail
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> toElmDecoder


-- gulp() function


gulp : Address -> Call ()
gulp contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "94909e62" []
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }


-- moneyMoneyMoneyMONEY() function


moneyMoneyMoneyMONEY : Address -> Call BigInt
moneyMoneyMoneyMONEY contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "2f2e6a65" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }


-- totalRaised() function


totalRaised : Address -> Call BigInt
totalRaised contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "c5c4744c" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }


-- ethReceived(address,uint256) event


type alias EthReceived =
    { from : Address
    , amount : BigInt
    }


ethReceivedEvent : Address -> LogFilter
ethReceivedEvent contractAddress = 
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.unsafeToHex "fe2d73074d233633e644a6fb7186458fbf422add1c18d996efd14ffbece6f2b2" ]
    }


ethReceivedDecoder : Decoder EthReceived
ethReceivedDecoder = 
    Decode.succeed EthReceived
        |> custom (data 0 D.address)
        |> custom (data 1 D.uint)


-- gulped(uint256,uint256,uint256) event


type alias Gulped =
    { ether : BigInt
    , poolTokens : BigInt
    , pokeReward : BigInt
    }


gulpedEvent : Address -> LogFilter
gulpedEvent contractAddress = 
    { fromBlock = LatestBlock
    , toBlock = LatestBlock
    , address = contractAddress
    , topics = [ Just <| U.unsafeToHex "9485036cba2fa12b24a98c8f0abfa75898865cf51b0cbe764acb7000b479c2c9" ]
    }


gulpedDecoder : Decoder Gulped
gulpedDecoder = 
    Decode.succeed Gulped
        |> custom (data 0 D.uint)
        |> custom (data 1 D.uint)
        |> custom (data 2 D.uint)


