module Contracts.Generated.DEth exposing
    ( CalculateRedemptionValue
    , balanceOf
    , calculateRedemptionValue
    , redeem
    , squanderMyEthForWorthlessBeans
    )

import BigInt exposing (BigInt)
import Eth.Abi.Decode as D exposing (abiDecode, andMap, data, toElmDecoder, topic)
import Eth.Abi.Encode as E exposing (Encoding(..), abiEncode)
import Eth.Types exposing (..)
import Eth.Utils as U
import Json.Decode as Decode exposing (Decoder, succeed)
import Json.Decode.Pipeline exposing (custom)



{-

   This file was generated by https://github.com/cmditch/elm-ethereum-generator v4.0.0
   Compatible with elm-ethereum v4.0.0

-}
-- balanceOf(address) function


balanceOf : Address -> Address -> Call BigInt
balanceOf contractAddress account_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "70a08231" [ E.address account_ ]
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }



-- calculateRedemptionValue(uint256) function


type alias CalculateRedemptionValue =
    { totalCollateralRedeemed : BigInt
    , fee : BigInt
    , collateralReturned : BigInt
    }


calculateRedemptionValue : Address -> BigInt -> Call CalculateRedemptionValue
calculateRedemptionValue contractAddress tokensToRedeem_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "1a82c851" [ E.uint tokensToRedeem_ ]
    , nonce = Nothing
    , decoder = calculateRedemptionValueDecoder
    }


calculateRedemptionValueDecoder : Decoder CalculateRedemptionValue
calculateRedemptionValueDecoder =
    abiDecode CalculateRedemptionValue
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> toElmDecoder



-- redeem(uint256,address) function


redeem : Address -> BigInt -> Address -> Call ()
redeem contractAddress tokensToRedeem_ receiver_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "7bde82f2" [ E.uint tokensToRedeem_, E.address receiver_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }



-- squanderMyEthForWorthlessBeans(address) function


squanderMyEthForWorthlessBeans : Address -> Address -> Maybe BigInt -> Call ()
squanderMyEthForWorthlessBeans contractAddress receiver_ amount =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = amount
    , data = Just <| E.functionCall "026a9f93" [ E.address receiver_ ]
    , nonce = Nothing
    , decoder = Decode.succeed ()
    }
