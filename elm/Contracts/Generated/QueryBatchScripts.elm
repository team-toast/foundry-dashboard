module Contracts.Generated.QueryBatchScripts exposing
    ( GetCollateralFromDEth
    , GetDataFromQueryStakingPool
    , GetTeamToastFryTokenBalance
    , GetTreasuryBalance
    , balancerPermaFrostPoolAddress
    , burnAddress
    , ethContractAddress
    , ethFryContractAddress
    , executeAllQueries
    , getBalancerPoolFryBalance
    , getCollateralFromDEth
    , getCollateralFromDEthDecoder
    , getDataFromQueryStakingPool
    , getDataFromQueryStakingPoolDecoder
    , getPeriodFinishFromStakingRewards
    , getPermaFrostLockedTokenBalance
    , getPermaFrostTotalSupply
    , getTeamToastFryTokenBalance
    , getTeamToastFryTokenBalanceDecoder
    , getTotalRaisedFromGulper
    , getTotalSupplyFromDEth
    , getTreasuryBalances
    , getTreasuryBalancesDecoder
    , mainTreasuryAddress
    , secondTreasuryAddress
    , stakingContractAddress
    , teamToastAddress1
    , teamToastAddress2
    , teamToastAddress3
    , thirdTreasuryAddress
    )

import Eth.Abi.Decode as D exposing (abiDecode, andMap, data, toElmDecoder, topic)
import Eth.Abi.Encode as E exposing (Encoding(..), abiEncode)
import BigInt exposing (BigInt)
import Eth.Types exposing (..)
import Eth.Utils as U
import Json.Decode as Decode exposing (Decoder, succeed)
import Json.Decode.Pipeline exposing (custom)



{-

   This file was generated by https://github.com/cmditch/elm-ethereum-generator v4.0.0
   Compatible with elm-ethereum v4.0.0

-}
-- balancerPermaFrostPoolAddress() function


balancerPermaFrostPoolAddress : Address -> Call Address
balancerPermaFrostPoolAddress contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "ea859aad" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- burnAddress() function


burnAddress : Address -> Call Address
burnAddress contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "70d5ae05" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- ethContractAddress() function


ethContractAddress : Address -> Call Address
ethContractAddress contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "4e04993e" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- ethFryContractAddress() function


ethFryContractAddress : Address -> Call Address
ethFryContractAddress contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "d2d02a0b" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- executeAllQueries(address) function


executeAllQueries : Address -> Address -> Call (List (BigInt))
executeAllQueries contractAddress staker_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "b478ac67" [ E.address staker_ ]
    , nonce = Nothing
    , decoder = toElmDecoder (D.staticArray 19 D.uint)
    }


-- getBalancerPoolFryBalance() function


getBalancerPoolFryBalance : Address -> Call BigInt
getBalancerPoolFryBalance contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "131b6aff" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }


-- getCollateralFromDEth() function


type alias GetCollateralFromDEth =
    { priceRay : BigInt
    , totalCollateral : BigInt
    , debt : BigInt
    , collateralDenominatedDebt : BigInt
    , excessCollateral : BigInt
    }


getCollateralFromDEth : Address -> Call GetCollateralFromDEth
getCollateralFromDEth contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "ea7858fb" []
    , nonce = Nothing
    , decoder = getCollateralFromDEthDecoder
    }


getCollateralFromDEthDecoder : Decoder GetCollateralFromDEth
getCollateralFromDEthDecoder =
    abiDecode GetCollateralFromDEth
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> toElmDecoder


-- getDataFromQueryStakingPool(address) function


type alias GetDataFromQueryStakingPool =
    { availableBalance : BigInt
    , stakedBalance : BigInt
    , allowedBalance : BigInt
    , earned : BigInt
    , totalStakedValue : BigInt
    , apy : BigInt
    , rewardRate : BigInt
    , timestamp : BigInt
    }


getDataFromQueryStakingPool : Address -> Address -> Call GetDataFromQueryStakingPool
getDataFromQueryStakingPool contractAddress staker_ =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "ff1a29f1" [ E.address staker_ ]
    , nonce = Nothing
    , decoder = getDataFromQueryStakingPoolDecoder
    }


getDataFromQueryStakingPoolDecoder : Decoder GetDataFromQueryStakingPool
getDataFromQueryStakingPoolDecoder =
    abiDecode GetDataFromQueryStakingPool
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> toElmDecoder


-- getPeriodFinishFromStakingRewards() function


getPeriodFinishFromStakingRewards : Address -> Call BigInt
getPeriodFinishFromStakingRewards contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "67467e07" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }


-- getPermaFrostLockedTokenBalance() function


getPermaFrostLockedTokenBalance : Address -> Call BigInt
getPermaFrostLockedTokenBalance contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "59d0d020" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }


-- getPermaFrostTotalSupply() function


getPermaFrostTotalSupply : Address -> Call BigInt
getPermaFrostTotalSupply contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "8618c1af" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }


-- getTeamToastFryTokenBalance() function


type alias GetTeamToastFryTokenBalance =
    { toast1 : BigInt
    , toast2 : BigInt
    , toast3 : BigInt
    }


getTeamToastFryTokenBalance : Address -> Call GetTeamToastFryTokenBalance
getTeamToastFryTokenBalance contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "df700c3b" []
    , nonce = Nothing
    , decoder = getTeamToastFryTokenBalanceDecoder
    }


getTeamToastFryTokenBalanceDecoder : Decoder GetTeamToastFryTokenBalance
getTeamToastFryTokenBalanceDecoder =
    abiDecode GetTeamToastFryTokenBalance
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> toElmDecoder


-- getTotalRaisedFromGulper() function


getTotalRaisedFromGulper : Address -> Call BigInt
getTotalRaisedFromGulper contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "31bf1ead" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }


-- getTotalSupplyFromDEth() function


getTotalSupplyFromDEth : Address -> Call BigInt
getTotalSupplyFromDEth contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "6c4abd3a" []
    , nonce = Nothing
    , decoder = toElmDecoder D.uint
    }


-- getTreasuryBalances() function


type alias GetTreasuryBalance =
    { main : BigInt
    , second : BigInt
    , third : BigInt
    }


getTreasuryBalances : Address -> Call GetTreasuryBalance
getTreasuryBalances contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "fc5bb15c" []
    , nonce = Nothing
    , decoder = getTreasuryBalancesDecoder
    }


getTreasuryBalancesDecoder : Decoder GetTreasuryBalance
getTreasuryBalancesDecoder =
    abiDecode GetTreasuryBalance
        |> andMap D.uint
        |> andMap D.uint
        |> andMap D.uint
        |> toElmDecoder


-- mainTreasuryAddress() function


mainTreasuryAddress : Address -> Call Address
mainTreasuryAddress contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "79085ab5" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- secondTreasuryAddress() function


secondTreasuryAddress : Address -> Call Address
secondTreasuryAddress contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "e9ed3b60" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- stakingContractAddress() function


stakingContractAddress : Address -> Call Address
stakingContractAddress contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "3535f48b" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- teamToastAddress1() function


teamToastAddress1 : Address -> Call Address
teamToastAddress1 contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "911276ea" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- teamToastAddress2() function


teamToastAddress2 : Address -> Call Address
teamToastAddress2 contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "a7aebed8" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- teamToastAddress3() function


teamToastAddress3 : Address -> Call Address
teamToastAddress3 contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "e36058ed" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


-- thirdTreasuryAddress() function


thirdTreasuryAddress : Address -> Call Address
thirdTreasuryAddress contractAddress =
    { to = Just contractAddress
    , from = Nothing
    , gas = Nothing
    , gasPrice = Nothing
    , value = Nothing
    , data = Just <| E.functionCall "3c457166" []
    , nonce = Nothing
    , decoder = toElmDecoder D.address
    }


