-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Contracts.UniSwapGraph.Enum.Pair_orderBy exposing (..)

import Json.Decode as Decode exposing (Decoder)


type Pair_orderBy
    = Id
    | Token0
    | Token1
    | Reserve0
    | Reserve1
    | TotalSupply
    | ReserveETH
    | ReserveUSD
    | TrackedReserveETH
    | Token0Price
    | Token1Price
    | VolumeToken0
    | VolumeToken1
    | VolumeUSD
    | UntrackedVolumeUSD
    | TxCount
    | CreatedAtTimestamp
    | CreatedAtBlockNumber
    | LiquidityProviderCount


list : List Pair_orderBy
list =
    [ Id, Token0, Token1, Reserve0, Reserve1, TotalSupply, ReserveETH, ReserveUSD, TrackedReserveETH, Token0Price, Token1Price, VolumeToken0, VolumeToken1, VolumeUSD, UntrackedVolumeUSD, TxCount, CreatedAtTimestamp, CreatedAtBlockNumber, LiquidityProviderCount ]


decoder : Decoder Pair_orderBy
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "id" ->
                        Decode.succeed Id

                    "token0" ->
                        Decode.succeed Token0

                    "token1" ->
                        Decode.succeed Token1

                    "reserve0" ->
                        Decode.succeed Reserve0

                    "reserve1" ->
                        Decode.succeed Reserve1

                    "totalSupply" ->
                        Decode.succeed TotalSupply

                    "reserveETH" ->
                        Decode.succeed ReserveETH

                    "reserveUSD" ->
                        Decode.succeed ReserveUSD

                    "trackedReserveETH" ->
                        Decode.succeed TrackedReserveETH

                    "token0Price" ->
                        Decode.succeed Token0Price

                    "token1Price" ->
                        Decode.succeed Token1Price

                    "volumeToken0" ->
                        Decode.succeed VolumeToken0

                    "volumeToken1" ->
                        Decode.succeed VolumeToken1

                    "volumeUSD" ->
                        Decode.succeed VolumeUSD

                    "untrackedVolumeUSD" ->
                        Decode.succeed UntrackedVolumeUSD

                    "txCount" ->
                        Decode.succeed TxCount

                    "createdAtTimestamp" ->
                        Decode.succeed CreatedAtTimestamp

                    "createdAtBlockNumber" ->
                        Decode.succeed CreatedAtBlockNumber

                    "liquidityProviderCount" ->
                        Decode.succeed LiquidityProviderCount

                    _ ->
                        Decode.fail ("Invalid Pair_orderBy type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Pair_orderBy -> String
toString enum =
    case enum of
        Id ->
            "id"

        Token0 ->
            "token0"

        Token1 ->
            "token1"

        Reserve0 ->
            "reserve0"

        Reserve1 ->
            "reserve1"

        TotalSupply ->
            "totalSupply"

        ReserveETH ->
            "reserveETH"

        ReserveUSD ->
            "reserveUSD"

        TrackedReserveETH ->
            "trackedReserveETH"

        Token0Price ->
            "token0Price"

        Token1Price ->
            "token1Price"

        VolumeToken0 ->
            "volumeToken0"

        VolumeToken1 ->
            "volumeToken1"

        VolumeUSD ->
            "volumeUSD"

        UntrackedVolumeUSD ->
            "untrackedVolumeUSD"

        TxCount ->
            "txCount"

        CreatedAtTimestamp ->
            "createdAtTimestamp"

        CreatedAtBlockNumber ->
            "createdAtBlockNumber"

        LiquidityProviderCount ->
            "liquidityProviderCount"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Pair_orderBy
fromString enumString =
    case enumString of
        "id" ->
            Just Id

        "token0" ->
            Just Token0

        "token1" ->
            Just Token1

        "reserve0" ->
            Just Reserve0

        "reserve1" ->
            Just Reserve1

        "totalSupply" ->
            Just TotalSupply

        "reserveETH" ->
            Just ReserveETH

        "reserveUSD" ->
            Just ReserveUSD

        "trackedReserveETH" ->
            Just TrackedReserveETH

        "token0Price" ->
            Just Token0Price

        "token1Price" ->
            Just Token1Price

        "volumeToken0" ->
            Just VolumeToken0

        "volumeToken1" ->
            Just VolumeToken1

        "volumeUSD" ->
            Just VolumeUSD

        "untrackedVolumeUSD" ->
            Just UntrackedVolumeUSD

        "txCount" ->
            Just TxCount

        "createdAtTimestamp" ->
            Just CreatedAtTimestamp

        "createdAtBlockNumber" ->
            Just CreatedAtBlockNumber

        "liquidityProviderCount" ->
            Just LiquidityProviderCount

        _ ->
            Nothing
