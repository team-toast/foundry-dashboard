-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Contracts.UniSwapGraph.Enum.UniswapFactory_orderBy exposing (..)

import Json.Decode as Decode exposing (Decoder)


type UniswapFactory_orderBy
    = Id
    | PairCount
    | TotalVolumeUSD
    | TotalVolumeETH
    | UntrackedVolumeUSD
    | TotalLiquidityUSD
    | TotalLiquidityETH
    | TxCount
    | MostLiquidTokens


list : List UniswapFactory_orderBy
list =
    [ Id, PairCount, TotalVolumeUSD, TotalVolumeETH, UntrackedVolumeUSD, TotalLiquidityUSD, TotalLiquidityETH, TxCount, MostLiquidTokens ]


decoder : Decoder UniswapFactory_orderBy
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "id" ->
                        Decode.succeed Id

                    "pairCount" ->
                        Decode.succeed PairCount

                    "totalVolumeUSD" ->
                        Decode.succeed TotalVolumeUSD

                    "totalVolumeETH" ->
                        Decode.succeed TotalVolumeETH

                    "untrackedVolumeUSD" ->
                        Decode.succeed UntrackedVolumeUSD

                    "totalLiquidityUSD" ->
                        Decode.succeed TotalLiquidityUSD

                    "totalLiquidityETH" ->
                        Decode.succeed TotalLiquidityETH

                    "txCount" ->
                        Decode.succeed TxCount

                    "mostLiquidTokens" ->
                        Decode.succeed MostLiquidTokens

                    _ ->
                        Decode.fail ("Invalid UniswapFactory_orderBy type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : UniswapFactory_orderBy -> String
toString enum =
    case enum of
        Id ->
            "id"

        PairCount ->
            "pairCount"

        TotalVolumeUSD ->
            "totalVolumeUSD"

        TotalVolumeETH ->
            "totalVolumeETH"

        UntrackedVolumeUSD ->
            "untrackedVolumeUSD"

        TotalLiquidityUSD ->
            "totalLiquidityUSD"

        TotalLiquidityETH ->
            "totalLiquidityETH"

        TxCount ->
            "txCount"

        MostLiquidTokens ->
            "mostLiquidTokens"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe UniswapFactory_orderBy
fromString enumString =
    case enumString of
        "id" ->
            Just Id

        "pairCount" ->
            Just PairCount

        "totalVolumeUSD" ->
            Just TotalVolumeUSD

        "totalVolumeETH" ->
            Just TotalVolumeETH

        "untrackedVolumeUSD" ->
            Just UntrackedVolumeUSD

        "totalLiquidityUSD" ->
            Just TotalLiquidityUSD

        "totalLiquidityETH" ->
            Just TotalLiquidityETH

        "txCount" ->
            Just TxCount

        "mostLiquidTokens" ->
            Just MostLiquidTokens

        _ ->
            Nothing
