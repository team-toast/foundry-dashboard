-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Contracts.UniSwapGraph.Enum.Swap_orderBy exposing (..)

import Json.Decode as Decode exposing (Decoder)


type Swap_orderBy
    = Id
    | Transaction
    | Timestamp
    | Pair
    | Sender
    | Amount0In
    | Amount1In
    | Amount0Out
    | Amount1Out
    | To
    | LogIndex
    | AmountUSD


list : List Swap_orderBy
list =
    [ Id, Transaction, Timestamp, Pair, Sender, Amount0In, Amount1In, Amount0Out, Amount1Out, To, LogIndex, AmountUSD ]


decoder : Decoder Swap_orderBy
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "id" ->
                        Decode.succeed Id

                    "transaction" ->
                        Decode.succeed Transaction

                    "timestamp" ->
                        Decode.succeed Timestamp

                    "pair" ->
                        Decode.succeed Pair

                    "sender" ->
                        Decode.succeed Sender

                    "amount0In" ->
                        Decode.succeed Amount0In

                    "amount1In" ->
                        Decode.succeed Amount1In

                    "amount0Out" ->
                        Decode.succeed Amount0Out

                    "amount1Out" ->
                        Decode.succeed Amount1Out

                    "to" ->
                        Decode.succeed To

                    "logIndex" ->
                        Decode.succeed LogIndex

                    "amountUSD" ->
                        Decode.succeed AmountUSD

                    _ ->
                        Decode.fail ("Invalid Swap_orderBy type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Swap_orderBy -> String
toString enum =
    case enum of
        Id ->
            "id"

        Transaction ->
            "transaction"

        Timestamp ->
            "timestamp"

        Pair ->
            "pair"

        Sender ->
            "sender"

        Amount0In ->
            "amount0In"

        Amount1In ->
            "amount1In"

        Amount0Out ->
            "amount0Out"

        Amount1Out ->
            "amount1Out"

        To ->
            "to"

        LogIndex ->
            "logIndex"

        AmountUSD ->
            "amountUSD"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Swap_orderBy
fromString enumString =
    case enumString of
        "id" ->
            Just Id

        "transaction" ->
            Just Transaction

        "timestamp" ->
            Just Timestamp

        "pair" ->
            Just Pair

        "sender" ->
            Just Sender

        "amount0In" ->
            Just Amount0In

        "amount1In" ->
            Just Amount1In

        "amount0Out" ->
            Just Amount0Out

        "amount1Out" ->
            Just Amount1Out

        "to" ->
            Just To

        "logIndex" ->
            Just LogIndex

        "amountUSD" ->
            Just AmountUSD

        _ ->
            Nothing
