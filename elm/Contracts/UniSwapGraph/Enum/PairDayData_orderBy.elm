-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Contracts.UniSwapGraph.Enum.PairDayData_orderBy exposing (..)

import Json.Decode as Decode exposing (Decoder)


type PairDayData_orderBy
    = Id
    | Date
    | PairAddress
    | Token0
    | Token1
    | Reserve0
    | Reserve1
    | TotalSupply
    | ReserveUSD
    | DailyVolumeToken0
    | DailyVolumeToken1
    | DailyVolumeUSD
    | DailyTxns


list : List PairDayData_orderBy
list =
    [ Id, Date, PairAddress, Token0, Token1, Reserve0, Reserve1, TotalSupply, ReserveUSD, DailyVolumeToken0, DailyVolumeToken1, DailyVolumeUSD, DailyTxns ]


decoder : Decoder PairDayData_orderBy
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "id" ->
                        Decode.succeed Id

                    "date" ->
                        Decode.succeed Date

                    "pairAddress" ->
                        Decode.succeed PairAddress

                    "token0" ->
                        Decode.succeed Token0

                    "token1" ->
                        Decode.succeed Token1

                    "reserve0" ->
                        Decode.succeed Reserve0

                    "reserve1" ->
                        Decode.succeed Reserve1

                    "totalSupply" ->
                        Decode.succeed TotalSupply

                    "reserveUSD" ->
                        Decode.succeed ReserveUSD

                    "dailyVolumeToken0" ->
                        Decode.succeed DailyVolumeToken0

                    "dailyVolumeToken1" ->
                        Decode.succeed DailyVolumeToken1

                    "dailyVolumeUSD" ->
                        Decode.succeed DailyVolumeUSD

                    "dailyTxns" ->
                        Decode.succeed DailyTxns

                    _ ->
                        Decode.fail ("Invalid PairDayData_orderBy type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : PairDayData_orderBy -> String
toString enum =
    case enum of
        Id ->
            "id"

        Date ->
            "date"

        PairAddress ->
            "pairAddress"

        Token0 ->
            "token0"

        Token1 ->
            "token1"

        Reserve0 ->
            "reserve0"

        Reserve1 ->
            "reserve1"

        TotalSupply ->
            "totalSupply"

        ReserveUSD ->
            "reserveUSD"

        DailyVolumeToken0 ->
            "dailyVolumeToken0"

        DailyVolumeToken1 ->
            "dailyVolumeToken1"

        DailyVolumeUSD ->
            "dailyVolumeUSD"

        DailyTxns ->
            "dailyTxns"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe PairDayData_orderBy
fromString enumString =
    case enumString of
        "id" ->
            Just Id

        "date" ->
            Just Date

        "pairAddress" ->
            Just PairAddress

        "token0" ->
            Just Token0

        "token1" ->
            Just Token1

        "reserve0" ->
            Just Reserve0

        "reserve1" ->
            Just Reserve1

        "totalSupply" ->
            Just TotalSupply

        "reserveUSD" ->
            Just ReserveUSD

        "dailyVolumeToken0" ->
            Just DailyVolumeToken0

        "dailyVolumeToken1" ->
            Just DailyVolumeToken1

        "dailyVolumeUSD" ->
            Just DailyVolumeUSD

        "dailyTxns" ->
            Just DailyTxns

        _ ->
            Nothing
