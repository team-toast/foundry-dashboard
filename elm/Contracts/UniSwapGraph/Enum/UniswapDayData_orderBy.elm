-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Contracts.UniSwapGraph.Enum.UniswapDayData_orderBy exposing (..)

import Json.Decode as Decode exposing (Decoder)


type UniswapDayData_orderBy
    = Id
    | Date
    | DailyVolumeETH
    | DailyVolumeUSD
    | DailyVolumeUntracked
    | TotalVolumeETH
    | TotalLiquidityETH
    | TotalVolumeUSD
    | TotalLiquidityUSD
    | MaxStored
    | MostLiquidTokens
    | TxCount


list : List UniswapDayData_orderBy
list =
    [ Id, Date, DailyVolumeETH, DailyVolumeUSD, DailyVolumeUntracked, TotalVolumeETH, TotalLiquidityETH, TotalVolumeUSD, TotalLiquidityUSD, MaxStored, MostLiquidTokens, TxCount ]


decoder : Decoder UniswapDayData_orderBy
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "id" ->
                        Decode.succeed Id

                    "date" ->
                        Decode.succeed Date

                    "dailyVolumeETH" ->
                        Decode.succeed DailyVolumeETH

                    "dailyVolumeUSD" ->
                        Decode.succeed DailyVolumeUSD

                    "dailyVolumeUntracked" ->
                        Decode.succeed DailyVolumeUntracked

                    "totalVolumeETH" ->
                        Decode.succeed TotalVolumeETH

                    "totalLiquidityETH" ->
                        Decode.succeed TotalLiquidityETH

                    "totalVolumeUSD" ->
                        Decode.succeed TotalVolumeUSD

                    "totalLiquidityUSD" ->
                        Decode.succeed TotalLiquidityUSD

                    "maxStored" ->
                        Decode.succeed MaxStored

                    "mostLiquidTokens" ->
                        Decode.succeed MostLiquidTokens

                    "txCount" ->
                        Decode.succeed TxCount

                    _ ->
                        Decode.fail ("Invalid UniswapDayData_orderBy type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : UniswapDayData_orderBy -> String
toString enum =
    case enum of
        Id ->
            "id"

        Date ->
            "date"

        DailyVolumeETH ->
            "dailyVolumeETH"

        DailyVolumeUSD ->
            "dailyVolumeUSD"

        DailyVolumeUntracked ->
            "dailyVolumeUntracked"

        TotalVolumeETH ->
            "totalVolumeETH"

        TotalLiquidityETH ->
            "totalLiquidityETH"

        TotalVolumeUSD ->
            "totalVolumeUSD"

        TotalLiquidityUSD ->
            "totalLiquidityUSD"

        MaxStored ->
            "maxStored"

        MostLiquidTokens ->
            "mostLiquidTokens"

        TxCount ->
            "txCount"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe UniswapDayData_orderBy
fromString enumString =
    case enumString of
        "id" ->
            Just Id

        "date" ->
            Just Date

        "dailyVolumeETH" ->
            Just DailyVolumeETH

        "dailyVolumeUSD" ->
            Just DailyVolumeUSD

        "dailyVolumeUntracked" ->
            Just DailyVolumeUntracked

        "totalVolumeETH" ->
            Just TotalVolumeETH

        "totalLiquidityETH" ->
            Just TotalLiquidityETH

        "totalVolumeUSD" ->
            Just TotalVolumeUSD

        "totalLiquidityUSD" ->
            Just TotalLiquidityUSD

        "maxStored" ->
            Just MaxStored

        "mostLiquidTokens" ->
            Just MostLiquidTokens

        "txCount" ->
            Just TxCount

        _ ->
            Nothing
