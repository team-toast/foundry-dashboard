-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Contracts.UniSwapGraph.Enum.PairHourData_orderBy exposing (..)

import Json.Decode as Decode exposing (Decoder)


type PairHourData_orderBy
    = Id
    | HourStartUnix
    | Pair
    | Reserve0
    | Reserve1
    | ReserveUSD
    | HourlyVolumeToken0
    | HourlyVolumeToken1
    | HourlyVolumeUSD
    | HourlyTxns


list : List PairHourData_orderBy
list =
    [ Id, HourStartUnix, Pair, Reserve0, Reserve1, ReserveUSD, HourlyVolumeToken0, HourlyVolumeToken1, HourlyVolumeUSD, HourlyTxns ]


decoder : Decoder PairHourData_orderBy
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "id" ->
                        Decode.succeed Id

                    "hourStartUnix" ->
                        Decode.succeed HourStartUnix

                    "pair" ->
                        Decode.succeed Pair

                    "reserve0" ->
                        Decode.succeed Reserve0

                    "reserve1" ->
                        Decode.succeed Reserve1

                    "reserveUSD" ->
                        Decode.succeed ReserveUSD

                    "hourlyVolumeToken0" ->
                        Decode.succeed HourlyVolumeToken0

                    "hourlyVolumeToken1" ->
                        Decode.succeed HourlyVolumeToken1

                    "hourlyVolumeUSD" ->
                        Decode.succeed HourlyVolumeUSD

                    "hourlyTxns" ->
                        Decode.succeed HourlyTxns

                    _ ->
                        Decode.fail ("Invalid PairHourData_orderBy type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : PairHourData_orderBy -> String
toString enum =
    case enum of
        Id ->
            "id"

        HourStartUnix ->
            "hourStartUnix"

        Pair ->
            "pair"

        Reserve0 ->
            "reserve0"

        Reserve1 ->
            "reserve1"

        ReserveUSD ->
            "reserveUSD"

        HourlyVolumeToken0 ->
            "hourlyVolumeToken0"

        HourlyVolumeToken1 ->
            "hourlyVolumeToken1"

        HourlyVolumeUSD ->
            "hourlyVolumeUSD"

        HourlyTxns ->
            "hourlyTxns"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe PairHourData_orderBy
fromString enumString =
    case enumString of
        "id" ->
            Just Id

        "hourStartUnix" ->
            Just HourStartUnix

        "pair" ->
            Just Pair

        "reserve0" ->
            Just Reserve0

        "reserve1" ->
            Just Reserve1

        "reserveUSD" ->
            Just ReserveUSD

        "hourlyVolumeToken0" ->
            Just HourlyVolumeToken0

        "hourlyVolumeToken1" ->
            Just HourlyVolumeToken1

        "hourlyVolumeUSD" ->
            Just HourlyVolumeUSD

        "hourlyTxns" ->
            Just HourlyTxns

        _ ->
            Nothing
