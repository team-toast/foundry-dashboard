-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Contracts.UniSwapGraph.Enum.Token_orderBy exposing (..)

import Json.Decode as Decode exposing (Decoder)


type Token_orderBy
    = Id
    | Symbol
    | Name
    | Decimals
    | TotalSupply
    | TradeVolume
    | TradeVolumeUSD
    | UntrackedVolumeUSD
    | TxCount
    | TotalLiquidity
    | DerivedETH
    | MostLiquidPairs


list : List Token_orderBy
list =
    [ Id, Symbol, Name, Decimals, TotalSupply, TradeVolume, TradeVolumeUSD, UntrackedVolumeUSD, TxCount, TotalLiquidity, DerivedETH, MostLiquidPairs ]


decoder : Decoder Token_orderBy
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "id" ->
                        Decode.succeed Id

                    "symbol" ->
                        Decode.succeed Symbol

                    "name" ->
                        Decode.succeed Name

                    "decimals" ->
                        Decode.succeed Decimals

                    "totalSupply" ->
                        Decode.succeed TotalSupply

                    "tradeVolume" ->
                        Decode.succeed TradeVolume

                    "tradeVolumeUSD" ->
                        Decode.succeed TradeVolumeUSD

                    "untrackedVolumeUSD" ->
                        Decode.succeed UntrackedVolumeUSD

                    "txCount" ->
                        Decode.succeed TxCount

                    "totalLiquidity" ->
                        Decode.succeed TotalLiquidity

                    "derivedETH" ->
                        Decode.succeed DerivedETH

                    "mostLiquidPairs" ->
                        Decode.succeed MostLiquidPairs

                    _ ->
                        Decode.fail ("Invalid Token_orderBy type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Token_orderBy -> String
toString enum =
    case enum of
        Id ->
            "id"

        Symbol ->
            "symbol"

        Name ->
            "name"

        Decimals ->
            "decimals"

        TotalSupply ->
            "totalSupply"

        TradeVolume ->
            "tradeVolume"

        TradeVolumeUSD ->
            "tradeVolumeUSD"

        UntrackedVolumeUSD ->
            "untrackedVolumeUSD"

        TxCount ->
            "txCount"

        TotalLiquidity ->
            "totalLiquidity"

        DerivedETH ->
            "derivedETH"

        MostLiquidPairs ->
            "mostLiquidPairs"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Token_orderBy
fromString enumString =
    case enumString of
        "id" ->
            Just Id

        "symbol" ->
            Just Symbol

        "name" ->
            Just Name

        "decimals" ->
            Just Decimals

        "totalSupply" ->
            Just TotalSupply

        "tradeVolume" ->
            Just TradeVolume

        "tradeVolumeUSD" ->
            Just TradeVolumeUSD

        "untrackedVolumeUSD" ->
            Just UntrackedVolumeUSD

        "txCount" ->
            Just TxCount

        "totalLiquidity" ->
            Just TotalLiquidity

        "derivedETH" ->
            Just DerivedETH

        "mostLiquidPairs" ->
            Just MostLiquidPairs

        _ ->
            Nothing
