-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Contracts.UniSwapGraph.Enum.TokenDayData_orderBy exposing (..)

import Json.Decode as Decode exposing (Decoder)


type TokenDayData_orderBy
    = Id
    | Date
    | Token
    | DailyVolumeToken
    | DailyVolumeETH
    | DailyVolumeUSD
    | DailyTxns
    | TotalLiquidityToken
    | TotalLiquidityETH
    | TotalLiquidityUSD
    | PriceUSD
    | MaxStored
    | MostLiquidPairs


list : List TokenDayData_orderBy
list =
    [ Id, Date, Token, DailyVolumeToken, DailyVolumeETH, DailyVolumeUSD, DailyTxns, TotalLiquidityToken, TotalLiquidityETH, TotalLiquidityUSD, PriceUSD, MaxStored, MostLiquidPairs ]


decoder : Decoder TokenDayData_orderBy
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "id" ->
                        Decode.succeed Id

                    "date" ->
                        Decode.succeed Date

                    "token" ->
                        Decode.succeed Token

                    "dailyVolumeToken" ->
                        Decode.succeed DailyVolumeToken

                    "dailyVolumeETH" ->
                        Decode.succeed DailyVolumeETH

                    "dailyVolumeUSD" ->
                        Decode.succeed DailyVolumeUSD

                    "dailyTxns" ->
                        Decode.succeed DailyTxns

                    "totalLiquidityToken" ->
                        Decode.succeed TotalLiquidityToken

                    "totalLiquidityETH" ->
                        Decode.succeed TotalLiquidityETH

                    "totalLiquidityUSD" ->
                        Decode.succeed TotalLiquidityUSD

                    "priceUSD" ->
                        Decode.succeed PriceUSD

                    "maxStored" ->
                        Decode.succeed MaxStored

                    "mostLiquidPairs" ->
                        Decode.succeed MostLiquidPairs

                    _ ->
                        Decode.fail ("Invalid TokenDayData_orderBy type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : TokenDayData_orderBy -> String
toString enum =
    case enum of
        Id ->
            "id"

        Date ->
            "date"

        Token ->
            "token"

        DailyVolumeToken ->
            "dailyVolumeToken"

        DailyVolumeETH ->
            "dailyVolumeETH"

        DailyVolumeUSD ->
            "dailyVolumeUSD"

        DailyTxns ->
            "dailyTxns"

        TotalLiquidityToken ->
            "totalLiquidityToken"

        TotalLiquidityETH ->
            "totalLiquidityETH"

        TotalLiquidityUSD ->
            "totalLiquidityUSD"

        PriceUSD ->
            "priceUSD"

        MaxStored ->
            "maxStored"

        MostLiquidPairs ->
            "mostLiquidPairs"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe TokenDayData_orderBy
fromString enumString =
    case enumString of
        "id" ->
            Just Id

        "date" ->
            Just Date

        "token" ->
            Just Token

        "dailyVolumeToken" ->
            Just DailyVolumeToken

        "dailyVolumeETH" ->
            Just DailyVolumeETH

        "dailyVolumeUSD" ->
            Just DailyVolumeUSD

        "dailyTxns" ->
            Just DailyTxns

        "totalLiquidityToken" ->
            Just TotalLiquidityToken

        "totalLiquidityETH" ->
            Just TotalLiquidityETH

        "totalLiquidityUSD" ->
            Just TotalLiquidityUSD

        "priceUSD" ->
            Just PriceUSD

        "maxStored" ->
            Just MaxStored

        "mostLiquidPairs" ->
            Just MostLiquidPairs

        _ ->
            Nothing
