-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Contracts.UniSwapGraph.Enum.Burn_orderBy exposing (..)

import Json.Decode as Decode exposing (Decoder)


type Burn_orderBy
    = Id
    | Transaction
    | Timestamp
    | Pair
    | Liquidity
    | Sender
    | Amount0
    | Amount1
    | To
    | LogIndex
    | AmountUSD
    | NeedsComplete
    | FeeTo
    | FeeLiquidity


list : List Burn_orderBy
list =
    [ Id, Transaction, Timestamp, Pair, Liquidity, Sender, Amount0, Amount1, To, LogIndex, AmountUSD, NeedsComplete, FeeTo, FeeLiquidity ]


decoder : Decoder Burn_orderBy
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "id" ->
                        Decode.succeed Id

                    "transaction" ->
                        Decode.succeed Transaction

                    "timestamp" ->
                        Decode.succeed Timestamp

                    "pair" ->
                        Decode.succeed Pair

                    "liquidity" ->
                        Decode.succeed Liquidity

                    "sender" ->
                        Decode.succeed Sender

                    "amount0" ->
                        Decode.succeed Amount0

                    "amount1" ->
                        Decode.succeed Amount1

                    "to" ->
                        Decode.succeed To

                    "logIndex" ->
                        Decode.succeed LogIndex

                    "amountUSD" ->
                        Decode.succeed AmountUSD

                    "needsComplete" ->
                        Decode.succeed NeedsComplete

                    "feeTo" ->
                        Decode.succeed FeeTo

                    "feeLiquidity" ->
                        Decode.succeed FeeLiquidity

                    _ ->
                        Decode.fail ("Invalid Burn_orderBy type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Burn_orderBy -> String
toString enum =
    case enum of
        Id ->
            "id"

        Transaction ->
            "transaction"

        Timestamp ->
            "timestamp"

        Pair ->
            "pair"

        Liquidity ->
            "liquidity"

        Sender ->
            "sender"

        Amount0 ->
            "amount0"

        Amount1 ->
            "amount1"

        To ->
            "to"

        LogIndex ->
            "logIndex"

        AmountUSD ->
            "amountUSD"

        NeedsComplete ->
            "needsComplete"

        FeeTo ->
            "feeTo"

        FeeLiquidity ->
            "feeLiquidity"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Burn_orderBy
fromString enumString =
    case enumString of
        "id" ->
            Just Id

        "transaction" ->
            Just Transaction

        "timestamp" ->
            Just Timestamp

        "pair" ->
            Just Pair

        "liquidity" ->
            Just Liquidity

        "sender" ->
            Just Sender

        "amount0" ->
            Just Amount0

        "amount1" ->
            Just Amount1

        "to" ->
            Just To

        "logIndex" ->
            Just LogIndex

        "amountUSD" ->
            Just AmountUSD

        "needsComplete" ->
            Just NeedsComplete

        "feeTo" ->
            Just FeeTo

        "feeLiquidity" ->
            Just FeeLiquidity

        _ ->
            Nothing
